package net.liftmodules.mapperauth.model

import net.liftweb._
import net.liftweb.common._
import net.liftweb.http.S
import net.liftweb.util.Helpers._
import net.liftweb.mapper.MetaProtoExtendedSession
import net.liftweb.mapper.ProtoExtendedSession
import net.liftweb.mapper.By
import net.liftweb.mapper.MappedLong
import net.liftmodules.mapperauth.model.share.MappedExpiringDate
import net.liftweb.mapper.LongKeyedMapper
import net.liftmodules.mapperauth.MapperAuth
import net.liftweb.http.provider.HTTPCookie
import net.liftweb.mapper.LongKeyedMetaMapper
import net.liftweb.mapper.IdPK
import java.util.UUID
import net.liftweb.mapper.MappedString
import net.liftweb.mapper.KeyedMetaMapper
import net.liftweb.mapper.KeyedMapper
import net.liftweb.mapper.MappedStringIndex

class ExtSession extends KeyedMapper[String, ExtSession] {

  def getSingleton = ExtSession
  def primaryKeyField = id

  object id extends MappedStringIndex(this, 100) {
    override def writePermission_? = true
    override def dbAutogenerated_? = false
    override def dbNotNull_? = true
    override def dbIndexed_? = true
  }

  object userId extends MappedLong(this) {
    override def dbIndexed_? = true
  }

  object expires extends MappedExpiringDate(this, getSingleton.whenExpires)
}

/**
 * Extended sessions object to log user in automatically
 */
object ExtSession extends ExtSession with KeyedMetaMapper[String, ExtSession] with Loggable {

  override def dbTableName = "ext_session" // define the DB table name

 // MapperAuth vars
  private lazy val whenExpires = MapperAuth.extSessionExpires.vend
  private lazy val cookieName  = MapperAuth.extSessionCookieName.vend
  private lazy val cookiePath  = MapperAuth.extSessionCookiePath.vend

  // create an extSession
  def createExtSession(uid: Long) {
    deleteExtCookie() // make sure existing cookie is removed
    val inst = create.id(UUID.randomUUID().toString()).userId(uid).saveMe
    val cookie = HTTPCookie(cookieName, inst.id.get)
      .setMaxAge(whenExpires.toPeriod.toStandardSeconds.getSeconds).setPath(cookiePath)
    S.addCookie(cookie)
  }

  def createExtSession(uid: String) {
    asLong(uid).foreach(uid => createExtSession(uid))
  }

  // delete the ext cookie
  def deleteExtCookie() {
    for (cook <- S.findCookie(cookieName)) {
      S.deleteCookie(cookieName)
      logger.debug("S.deleteCookie called.")
      for {
        cv <- cook.value
        uuid <- tryo(UUID.fromString(cv))
        extSess <- find(uuid.toString())
      } {
        extSess.delete_!
        logger.debug("ExtSession Record deleted.")
      }
    }
  }

  def handleExtSession: Box[ExtSession] = {
    val extSess = for {
      cookie <- S.findCookie(cookieName) // empty means we should ignore it
      cookieValue <- cookie.value ?~ "Cookie value is empty"
      uuid <- tryo(UUID.fromString(cookieValue)) ?~ "Invalid UUID"
      es <- find(uuid.toString()) ?~ "ExtSession not found: %s".format(uuid.toString)
    } yield es

    extSess match {
      case Failure(msg, _, _) => deleteExtCookie(); extSess // cookie is not valid, delete it
      case Full(es) if (es.expires.isExpired) => // if it's expired, delete it and the cookie
        deleteExtCookie()
        Failure("Extended session has expired")
      case _ => extSess
    }
  }

}
